{% schema %}
  {
    "name": "Header",
    "settings": [
      {
        "type": "select",
        "id": "logo_position",
        "options": [
          {
            "value": "top-left",
            "label": "Top left"
          }, {
            "value": "top-center",
            "label": "Top center"
          }, {
            "value": "middle-left",
            "label": "Middle left"
          }, {
            "value": "middle-center",
            "label": "Middle center"
          }
        ],
        "default": "middle-left",
        "label": "Logo position"
      },
      {
        "type": "link_list",
        "id": "menu",
        "default": "main-menu",
        "label": "Menu"
      },
      {
        "type": "select",
        "id": "menu_type_desktop",
        "options": [
          {
            "value": "dropdown",
            "label": "Dropdown"
          }, {
            "value": "mega",
            "label": "Mega menu"
          }, {
            "value": "drawer",
            "label": "Drawer"
          }
        ],
        "default": "dropdown",
        "label": "Desktop menu type"
      },
      {
        "type": "select",
        "id": "sticky_header_type",
        "options": [
          {
            "value": "none",
            "label": "None"
          }, {
            "value": "on-scroll-up",
            "label": "On scroll up"
          }, {
            "value": "always",
            "label": "Always"
          }, {
            "value": "reduce-logo-size",
            "label": "Reduce logo size"
          }
        ],
        "default": "on-scroll-up",
        "label": "Sticky header type"
      }, {
        "type": "checkbox",
        "id": "show_line_separator",
        "default": true,
        "label": "Show line separator"
      }, {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "Color scheme",
        "default": "background-1"
      }, {
        "type": "checkbox",
        "id": "enable_country_selector",
        "default": true,
        "label": "Enable country selector"
      }, {
        "type": "checkbox",
        "id": "enable_language_selector",
        "default": true,
        "label": "Enable language selector"
      }, {
        "type": "range",
        "id": "margin_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "Margin bottom",
        "default": 0
      }, {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 36,
        "step": 4,
        "unit": "px",
        "label": "Padding top",
        "default": 20
      }, {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 36,
        "step": 4,
        "unit": "px",
        "label": "Padding bottom",
        "default": 20
      }
    ]
  }
{% endschema %}

<script>
    let debounceFce = null;
    let debounceQuantityValue = 0;

    document.addEventListener('DOMContentLoaded', function () {
        const cartDrawer = document.getElementById('global-cart-drawer');

        if (cartDrawer) {
            const observer = new MutationObserver((mutationsList) => {
                for (const mutation of mutationsList) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                        fetchCartItems();
                        console.log('Cart drawer class changed');
                    }
                }
            });

            observer.observe(cartDrawer, { attributes: true });
        } else {
            console.error('Cart drawer element not found');
        }
    });

    const handleCartClick = () => {
        fetchCartItems();
        const cartDrawer = document.getElementById('global-cart-drawer');
        cartDrawer.classList.remove('!hidden');
    };

    const handleCloseCart = () => {
        const cartDrawer = document.getElementById('global-cart-drawer');
        cartDrawer.classList.add('!hidden');
    };

    const handleRedirect = (path) => {
        window.location.href = path;
    };

    const fetchCartItems = () => {
        fetch('/cart.js')
            .then((response) => response.json())
            .then((data) => {
                const currency = data.currency;
                const currencySymbol = currency === 'USD' ? '$' : 'C$';
                let totalPrice = 0;
                const itemsContainer = document.getElementById('cart-items');
                itemsContainer.innerHTML = '';

                data.items.forEach((item, index) => {
                    const itemElement = document.createElement('div');
                    itemElement.classList.add(
                        'grid',
                        'grid-cols-3',
                        'gap-[8px]',
                        'py-[8px]',
                        'border-b',
                        'border-gray-200'
                    );

                    itemElement.id = `item-${index}`;

                    if (Object.keys(item.properties).length > 0 && item.properties['Custom Image']) {
                        totalPrice += item.price * item.quantity;
                        itemElement.innerHTML = `
                              <div class="item-image">
                                  <img src="${item.properties['Custom Image']}" alt="${
                            item.title
                        }" class="w-16 h-16 object-cover">
                              </div>
                              <div class="item-details flex flex-col justify-between">
                                  <a href="${item.url}" class="text-[16px] font-bold">${item.title}</a>
                                  <span class="text-[14px] text-gray-500">${item.description || ''}</span>
                                  <span class="text-[12px] text-gray-500">${item.properties['Packaging Type']}</span>
                                  <div class="item-quantity flex items-center justify-between mt-2">
                                      <div class='flex flex-row border border-gray-300 bg-gray-100'>
                                          <input type="number" id="debounce-quantity-${index}" value="${
                            item.quantity
                        }" class="w-12 text-center mx-2 bg-transparent" readonly>
                                      </div>
                                      <button onclick="removeCartItem('${
                                          item.key
                                      }', ${index})" class='text-[12px] text-gray-500 ml-[12px] bg-transparent cursor-pointer z-10'>
                                          {% render 'icon-trash' %}
                                      </button>
                                  </div>
                              </div>
                              <div class="item-price text-right">
                                  <span class="font-bold">${currencySymbol}${(
                            (item.price * item.quantity) /
                            100
                        ).toFixed(2)}</span>
                              </div>
                          `;
                    } else {
                        totalPrice += item.price * item.quantity;
                        itemElement.innerHTML = `
                              <div class="item-image">
                                  <img src="${item.image}" alt="${item.title}" class="w-16 h-16 object-cover">
                              </div>
                              <div class="item-details flex flex-col justify-between">
                                  <a href="${item.url}" class="text-[16px] font-bold">${item.title}</a>
                                  <span class="text-[14px] text-gray-500">${item.description || ''}</span>
                                  <div class="item-quantity flex items-center justify-between mt-2">
                                      <div class='flex flex-row border border-gray-500'>
                                          <button id="debounce-minus-${index}" onclick="updateCardItemDebounce('${
                            item.key
                        }', ${
                            item.quantity - 1
                        }, ${index})" class="px-2 py-1 hover:bg-gray-100 cursor-pointer bg-transparent">-</button>
                                          <input type="number" id="debounce-quantity-${index}" value="${
                            item.quantity
                        }" class="w-12 text-center mx-2" readonly>
                                          <button id="debounce-plus-${index}" onclick="updateCardItemDebounce('${
                            item.key
                        }', ${
                            item.quantity + 1
                        }, ${index})" class="px-2 py-1 hover:bg-gray-100 cursor-pointer bg-transparent">+</button>
                                      </div>
                                      <button onclick="removeCartItem('${
                                          item.key
                                      }', ${index})" class='text-[12px] text-gray-500 ml-[12px] bg-transparent cursor-pointer z-10'>
                                          {% render 'icon-trash' %}
                                      </button>
                                  </div>
                              </div>
                              <div class="item-price text-right">
                                  <span class="font-bold">${currencySymbol}${(item.final_line_price / 100).toFixed(
                            2
                        )}</span>
                              </div>
                          `;
                    }

                    itemsContainer.appendChild(itemElement);
                });
                document.getElementById('cart-total-price').innerText = `${currencySymbol}${(totalPrice / 100).toFixed(
                    2
                )}`;
            })
            .catch((error) => console.error('Error fetching cart items:', error));
    };

    const updateCardItemDebounce = (itemId, quantity, itemIndex, customPrint = false) => {
        debounceQuantityValue = quantity;

        if (customPrint) {
            document.getElementById(`debounce-custom-minus-${itemIndex}`).onclick = () =>
                updateCardItemDebounce(itemId, quantity - 1, itemIndex, true);
            document.getElementById(`debounce-custom-plus-${itemIndex}`).onclick = () =>
                updateCardItemDebounce(itemId, quantity + 1, itemIndex, true);
        } else {
            document.getElementById(`debounce-minus-${itemIndex}`).onclick = () =>
                updateCardItemDebounce(itemId, quantity - 1, itemIndex);
            document.getElementById(`debounce-plus-${itemIndex}`).onclick = () =>
                updateCardItemDebounce(itemId, quantity + 1, itemIndex);
        }

        document.getElementById(`debounce-quantity-${itemIndex}`).value = quantity;
        if (debounceFce) {
            clearTimeout(debounceFce);
        }
        debounceFce = setTimeout(() => updateCartItem(itemId, debounceQuantityValue, itemIndex), 1000);
    };

    const updateCartItem = (itemId, quantity, itemIndex) => {
        const itemDiv = document.getElementById(`item-${itemIndex}`);
        const bckUpContent = itemDiv.innerHTML;

        insertLoadingState(itemDiv);

        fetch('/cart/change.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: itemId,
                quantity: quantity,
            }),
        })
            .then((response) => response.json())
            .then((data) => {
                fetchCartItems();
            })
            .catch((error) => console.error('Error updating cart item:', error))
            .finally(() => {
                itemDiv.innerHTML = bckUpContent;
            });
    };

    const removeCartItem = (itemId, itemIndex) => {
        updateCartItem(itemId, 0, itemIndex);
    };

    const insertLoadingState = (div) => {
        const height = div.clientHeight + 20;
        div.outerHTML = `
              <div class='w-full col-span-3' style='height: ${height}px;'>
                  <div class='w-full h-full bg-gray-200 rounded flex items-center justify-center'>
                      <svg class="animate-spin w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="#000000" viewBox="0 0 330 330">
                          <g id="XMLID_2_">
                              <path id="XMLID_4_" d="M97.5,165c0-8.284-6.716-15-15-15h-60c-8.284,0-15,6.716-15,15s6.716,15,15,15h60
                              C90.784,180,97.5,173.284,97.5,165z"></path>
                              <path id="XMLID_5_" d="M307.5,150h-30c-8.284,0-15,6.716-15,15s6.716,15,15,15h30c8.284,0,15-6.716,15-15
                              S315.784,150,307.5,150z"></path>
                              <path id="XMLID_6_" d="M172.5,90c8.284,0,15-6.716,15-15V15c0-8.284-6.716-15-15-15s-15,6.716-15,15v60
                              C157.5,83.284,164.216,90,172.5,90z"></path>
                              <path id="XMLID_7_" d="M172.501,240c-8.284,0-15,6.716-15,15v60c0,8.284,6.716,15,15,15c8.284,0,15-6.716,15-15v-60
                              C187.501,246.716,180.785,240,172.501,240z"></path>
                              <path id="XMLID_8_" d="M77.04,48.327c-5.856-5.858-15.354-5.857-21.213,0c-5.858,5.858-5.858,15.355,0,21.213l42.427,42.428
                              c2.929,2.929,6.768,4.394,10.606,4.394c3.838,0,7.678-1.465,10.606-4.393c5.858-5.858,5.858-15.355,0-21.213L77.04,48.327z"></path>
                              <path id="XMLID_9_" d="M246.746,218.034c-5.857-5.857-15.355-5.857-21.213,0c-5.858,5.858-5.857,15.355,0,21.213l42.428,42.426
                              c2.929,2.929,6.768,4.393,10.607,4.393c3.839,0,7.678-1.465,10.606-4.393c5.858-5.858,5.857-15.355,0-21.213L246.746,218.034z"></path>
                              <path id="XMLID_10_" d="M98.254,218.034L55.828,260.46c-5.858,5.858-5.858,15.355,0,21.213c2.929,2.929,6.768,4.393,10.607,4.393
                              c3.839,0,7.678-1.464,10.606-4.393l42.426-42.426c5.858-5.858,5.858-15.355,0-21.213C113.609,212.176,104.111,212.176,98.254,218.034z"></path>
                          </g>
                      </svg>
                  </div>
              </div>`;
    };
</script>

{% comment %} CART DRAWER {% endcomment %}
<div class='w-full h-screen bg-[rgba(0,0,0,0.54)] fixed top-0 left-0 z-[99999] flex items-center justify-end !hidden' id='global-cart-drawer'>
  <div class='w-[90%] h-full bg-white md:max-w-[360px] min-w-[300px] px-[20px] flex flex-col justify-between'>
    {% comment %} HEADER {% endcomment %}
    <div class='w-full h-[60px] flex items-center justify-between border-b border-surface-secondary-active'>
      <span class='text-[20px] font-bold'>Your cart</span>
      <button onclick='handleCloseCart()'>
        <span class='text-[20px] font-bold'>X</span>
      </button>
    </div>
    {% comment %} ITEMS {% endcomment %}
    <div id='cart-items' class='flex flex-col overflow-y-auto flex-1'>ITEMS</div>

    {% comment %} FOOTER {% endcomment %}
    <div class='w-full flex items-center justify-between border-t border-surface-secondary-active flex-col py-[10px]'>
      <div class='flex flex-row items-center justify-between w-full'>
        <span class='text-[18px] font-medium'>Estimated total</span>
        <span class='text-[18px] font-bold' id='cart-total-price'>$0.00</span>
      </div>
      <p class='text-text-secondary text-[14px]'>
        Taxes, discounts and
        <a class='text-text-secondary underline' href='somwhere'>shipping</a>
        calculated at checkout.
      </p>

      <button class='w-full h-[48px] bg-text-primary text-text-inverse rounded-[20px] text-[16px] font-bold mt-[10px]' onclick="window.location.href='/checkout'">
        Checkout
      </button>
    </div>
  </div>
</div>

{% comment %} MOBILE NAVBAR {% endcomment %}
<div class='flex flex-row mt-[8px] w-full pr-[16px] pl-[4px] justify-between mb-[16px] lg:hidden'>
  <div class='flex gap-[16px] items-center justify-center'>
    <span onclick='toggleMenu()'>
      {% render 'icon-menu' %}
    </span>
    <span onclick="handleRedirect('{{ routes.root_url }}')">
      {% render 'logo-sm' %}
    </span>
  </div>

  <div class='flex flex-row gap-[16px] items-end justify-end'>
    <div class='p-3 cursor-pointer' onclick='toggleSearchModal()'>
      {% render 'icon-search' %}
    </div>
    <div class='p-3 cursor-pointer' onclick="handleRedirect('{{ routes.account_url }}')">
      {% render 'icon-user-circle' %}
    </div>
    <div class='min-w-[48px] min-h-[48px] w-[48px] h-[48px] size-[48px] rounded-full bg-surface-secondary-active flex items-center justify-center cursor-pointer relative' onclick='handleCartClick()'>
      {% if cart.item_count > 0 %}
        <div class='w-[24px] h-[24px] bg-highlight-yellow rounded-full top-[-8px] right-[-8px] absolute flex items-center justify-center' id='cart-badge'>
          <span class='font-bold text-text-primary text-[16px]' id='cart-count'>{{ cart.item_count }}</span>
        </div>
      {% endif %}
      {% render 'icon-basket' %}
    </div>
  </div>
</div>

<!-- MOBILE MENU BACKDROP -->
<div id='mobile-menu' class='hidden w-full h-screen fixed top-0 left-0 z-[99999] bg-surface-menu-backdrop bg-opacity-80 backdrop-blur-md flex flex-col items-center justify-center'>
  <!-- Close button -->
  <div class='fixed top-[28px] left-[28px] size-[24px] cursor-pointer z-[100]' onclick='toggleMenu()'>
    {% render 'icon-close' %}
  </div>

  <div class='flex flex-col w-full items-center justify-center gap-[16px]'>
    {% for link in linklists['main-menu'].links %}
      <div>
        <!-- MOBILE LINK with optional sublinks -->
        <a
          class='text-[16px] font-medium px-4 py-3 text-text-secondary-active flex items-center justify-center'
          href='{{ link.url }}'
          {% if link.links.size > 0 %}
          onclick='toggleSubMenu(this); return false;'
          {% endif %}>
          {{ link.title }}
            {% if link.links.size > 0 %}
            <!-- Arrow icon for mobile, with transition -->
            <span class='mobile-arrow-icon transition-transform duration-300'>
              {% render 'icon-navbar-dropdown'
                , fill_color: 'white' %}
            </span>
          {% endif %}
        </a>
        {% if link.links.size > 0 %}
          <div class='hidden space-y-2 mt-1'>
            {% for sublink in link.links %}
              <a class='block text-[14px] font-normal text-text-secondary-active text-center opacity-80 hover:opacity-100 transition-all' href='{{ sublink.url }}'>
                {{- sublink.title -}}
              </a>
            {% endfor %}
          </div>
        {% endif %}
      </div>
    {% else %}
      <p>No menu items found. Please configure your "main-menu" in the Shopify admin.</p>
    {% endfor %}
  </div>
</div>

{% comment %} DESKTOP NAVBAR {% endcomment %}
<div class='w-full px-[80px] gap-[48px] items-center my-[24px] hidden lg:!flex'>
  <div class='w-[80px] h-[80px] size-[80px] rounded-full cursor-pointer' onclick="handleRedirect('{{ routes.root_url }}')">
    {% render 'icon-logo' %}
  </div>
  <div class='flex gap-[8px] items-center justify-start flex-1'>
    {% for link in linklists['main-menu'].links %}
      {% if link.links.size > 0 %}
        <!-- Parent link with submenu -->
        <div
          class='relative has-submenu'
          onclick='toggleSubmenuDesktop(this);'
          style='cursor: pointer;'>
          <!-- Display link title and arrow in a row -->
          <div class='text-[16px] font-medium px-4 py-3 flex items-center gap-1'>
            <span>{{ link.title }}</span>
            <span class='arrow-icon transition-transform duration-300'>
              {% render 'icon-navbar-dropdown' %}
            </span>
          </div>

          <!-- Submenu hidden by default -->
          <div class='submenu hidden absolute left-0 top-full bg-white shadow-lg rounded-md min-w-[230px] py-2'>
            {% for sublink in link.links %}
              <a class='block px-4 py-2 text-[14px] text-gray-700 hover:bg-gray-100 rounded-md' href='{{ sublink.url }}'>
                {{ sublink.title }}
              </a>
            {% endfor %}
          </div>
        </div>
      {% else %}
        <!-- Simple link without submenu -->
        <a class='text-[16px] font-medium px-4 py-3 cursor-pointer' href='{{ link.url }}'>
          {{ link.title }}
        </a>
      {% endif %}
    {% else %}
      <p>No menu items found. Please configure your "main-menu" in the Shopify admin.</p>
    {% endfor %}
  </div>
  <div class='flex items-center justify-center gap-[8px]'>
    <div class='flex items-center gap-4'>
      {%- if section.settings.enable_country_selector and localization.available_countries.size > 1 -%}
        <localization-form>
          {% render 'country-localization' %}
        </localization-form>
      {%- endif -%}
    <!-- Other header elements -->
    </div>
  </div>
  <div class='p-3 cursor-pointer' onclick='toggleSearchModal()'>
    {% render 'icon-search' %}
  </div>
  <div class='p-3 cursor-pointer' onclick="handleRedirect('{{ routes.account_url }}')">
    {% render 'icon-user-circle' %}
  </div>

  <div
    class='min-w-[48px] min-h-[48px] w-[48px] h-[48px] size-[48px] rounded-full bg-surface-secondary-active flex items-center justify-center cursor-pointer relative'
    onclick='handleCartClick()'
    id='cart-container-pc'>
    {% if cart.item_count > 0 %}
      <div class='w-[24px] h-[24px] bg-highlight-yellow rounded-full top-[-8px] right-[-8px] absolute flex items-center justify-center'>
        <span class='font-bold text-text-primary text-[16px]'>{{ cart.item_count }}</span>
      </div>
    {% endif %}
    {% render 'icon-basket' %}
  </div>
</div>

{% comment %} SEARCH OVERLAY + SUGGESTIONS {% endcomment %}
<!--
  Updated search overlay to show product suggestions in real time.
  Click on any suggestion to be redirected to that product page.
-->
<div class='w-full h-screen fixed top-0 left-0 z-[99999] bg-surface-menu-backdrop bg-opacity-80 backdrop-blur-md flex flex-col items-center justify-center hidden' id='search-modal'>
  <!-- Close Button -->
  <div class='fixed top-[28px] right-[28px] size-[24px] cursor-pointer z-[100]' onclick='toggleSearchModal()'>
    {% render 'icon-close' %}
  </div>

  <!-- Search Input & Suggestions -->
  <div class='w-full h-full flex flex-col items-center justify-center px-4'>
    <div class='relative w-full max-w-[600px]'>
      <input
        type='text'
        id='search-input'
        class='w-full h-[48px] rounded-[10px] border border-gray-300 px-4 py-2'
        placeholder='Search products...'
        oninput='handleSearchInput()'>
      <!-- Suggestions Dropdown -->
      <ul id='search-results' class='absolute left-0 right-0 mt-2 bg-white border border-gray-300 rounded-md hidden max-h-60 overflow-y-auto'>
        <!-- Results appended here by JS -->
      </ul>
    </div>
  </div>
</div>

<script>
    function toggleSearchModal() {
        const searchModal = document.getElementById('search-modal');
        if (searchModal.classList.contains('hidden')) {
            searchModal.classList.remove('hidden');
        } else {
            searchModal.classList.add('hidden');
        }
    }

    // MOBILE SUBMENU: rotate arrow + show/hide
    function toggleSubMenu(element) {
        const subMenu = element.nextElementSibling;
        // The arrow icon is inside the <a> itself
        const arrowIcon = element.querySelector('.mobile-arrow-icon');

        if (subMenu.classList.contains('hidden')) {
            subMenu.classList.remove('hidden');
            arrowIcon && arrowIcon.classList.add('rotate-180');
        } else {
            subMenu.classList.add('hidden');
            arrowIcon && arrowIcon.classList.remove('rotate-180');
        }
    }

    // DESKTOP SUBMENU TOGGLER
    function toggleSubmenuDesktop(parentEl) {
        const arrow = parentEl.querySelector('.arrow-icon');
        const submenu = parentEl.querySelector('.submenu');

        if (submenu.classList.contains('hidden')) {
            submenu.classList.remove('hidden');
            arrow.classList.add('rotate-180');
        } else {
            submenu.classList.add('hidden');
            arrow.classList.remove('rotate-180');
        }
    }

    function toggleMenu() {
        const menu = document.getElementById('mobile-menu');
        if (menu.classList.contains('hidden')) {
            menu.classList.remove('hidden');
        } else {
            menu.classList.add('hidden');
        }
    }

    let searchTimeout = null;

    function handleSearchInput() {
        const query = document.getElementById('search-input').value.trim();
        const resultsContainer = document.getElementById('search-results');

        // If no query, hide the dropdown
        if (!query) {
            resultsContainer.innerHTML = '';
            resultsContainer.classList.add('hidden');
            return;
        }

        // Debounce the API calls
        if (searchTimeout) clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            fetch(
                `/search/suggest.json?q=${encodeURIComponent(
                    query
                )}&resources[type]=product&resources[limit]=6&resources[options][unavailable_products]=last`
            )
                .then((response) => response.json())
                .then((data) => {
                    const products = data.resources.results.products;
                    resultsContainer.innerHTML = '';

                    if (products && products.length > 0) {
                        products.forEach((product) => {
                            const li = document.createElement('li');
                            li.classList.add('px-4', 'py-2', 'cursor-pointer', 'hover:bg-gray-100');
                            li.textContent = product.title;

                            // On click, redirect to the product page
                            li.addEventListener('click', () => {
                                window.location.href = product.url;
                            });
                            resultsContainer.appendChild(li);
                        });
                        resultsContainer.classList.remove('hidden');
                    } else {
                        resultsContainer.classList.remove('hidden');
                        resultsContainer.innerHTML = `
                              <li class='px-4 py-2 text-gray-500'>No results found</li>
                          `;
                    }
                })
                .catch((error) => {
                    console.error('Error fetching search results:', error);
                });
        }, 300);
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Update cart count when page loads
        const updateCartCount = () => {
            fetch('/cart.js')
                .then((response) => response.json())
                .then((data) => {
                    const cartItemCount = data.item_count;
                    const cartValue = document.getElementById('cart-count');

                    if (cartItemCount > 0) {
                        if (cartValue) {
                            cartValue.innerText = cartItemCount;
                        }
                    } else {
                        const badge = document.getElementById('cart-badge');
                        if (badge) badge.style.display = 'none';
                    }
                })
                .catch((error) => console.error('Error fetching cart data:', error));
        };

        updateCartCount();
    });
</script>